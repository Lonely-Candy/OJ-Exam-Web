# 共有 8 个级别，按照从低到高为：ALL < TRACE < DEBUG < INFO < WARN < ERROR < FATAL < OFF。
# All:最低等级的，用于打开所有日志记录.
# Trace:是追踪，就是程序推进以下，你就可以写个trace输出，所以trace应该会特别多，不过没关系，我们可以设置最低日志级别不让他输出.
# Debug:指出细粒度信息事件对调试应用程序是非常有帮助的.
# Info:消息在粗粒度级别上突出强调应用程序的运行过程.
# Warn:输出警告及warn以下级别的日志.
# Error:输出错误信息日志.
# Fatal:输出每个严重的错误事件将会导致应用程序的退出的日志.
# OFF:最高等级的，用于关闭所有日志记录.
# 程序会打印高于或等于所设置级别的日志，设置的日志等级越高，打印出来的日志就越少。

Configuration:
  # 日志级别
  status: info
  # 用于指定 log4j2 自动重新配置的监测间隔时间，单位是s,最小是5s。
  monitorInterval: 30
  # 定义全局变量
  Properties:
    # 缺省配置（用于开发环境）
    Property:
      - name: log.file.name
        value: historyRunLog
      - name: log.path
        value: D:/OnlineJudge/exam/logs
      - name: project.name
        value: exam
      - name: log.pattern
        value: "%d{yyyy-MM-dd HH:mm:ss.SSS} -%5p ${PID:-} [%15.15t] %-30.30C{1.} : %m%n"
  # 日志输出的相关配置
  Appenders:
    # 输出到控制台
    Console:
      # 名字
      name: CONSOLE
      # SYSTEM_OUT 或 SYSTEM_ERR,一般只设置默认:SYSTEM_OUT.
      target: SYSTEM_OUT
      # 输出格式，不设置默认为:%m%n.
      PatternLayout:
        pattern: ${log.pattern}
    # 定义超过指定大小自动删除旧的创建新的的 Appender
    RollingFile:
      # 运行日志
      - name: ROLLING_FILE # 名字
        # 指定输出日志的目的文件带全路径的文件名.
        fileName: ${log.path}/${project.name}.log
        # 指定新建日志文件的名称格式.
        filePattern: "${log.path}/${log.file.name}/$${date:yyyy-MM}/${project.name}-%d{yyyy-MM-dd}-%i.log.gz"
        # 输出格式，不设置默认为:%m%n.
        PatternLayout:
          pattern: ${log.pattern}
        # 决定日志事件能否被输出。
        # 过滤条件有三个值：ACCEPT(接受), DENY(拒绝) or NEUTRAL(中立）
        Filters:
          # 一定要先去除不接受的日志级别，然后获取需要接受的日志级别
          # ACCEPT 将直接写入文件中，不进行下面的过滤
          # DENY 将直接过滤，不进行下面的过滤
          # NEUTRAL 保持中立，进入到下一个过滤中
          ThresholdFilter:
            - level: error
              onMatch: DENY
              onMismatch: NEUTRAL
            - level: info
              onMatch: ACCEPT
              onMismatch: DENY
        # 指定滚动日志的策略，就是什么时候进行新建日志文件输出日志.
        Policies:
          # 基于时间的滚动策略，
          TimeBasedTriggeringPolicy:
            # 按天分类
            # modulate=true 用来调整时间：比如现在是早上 3am，interval是 4，那么第一次滚动是在 4am，接着是 8am，12am...而不是 7am.
            modulate: true
            # interval 属性用来指定多久滚动一次，默认是 1 hour。
            interval: 1
          # 基于指定文件大小的滚动策略，size属性用来定义每个日志文件的大小.
          # SizeBasedTriggeringPolicy:
          #   size:
        # 用来指定同一个文件夹下有最大的日志文件数（超过的会自动删除久的）
        DefaultRolloverStrategy:
          # 文件最多 100 个
          max: 100
      # 业务日志
      - name: BUSINESS_ROLLING_FILE
        ignoreExceptions: false
        fileName: ${log.path}/business/${project.name}_bussiness.log
        filePattern: "${log.path}/${log.file.name}/business/$${date:yyyy-MM}/${project.name}-%d{yyyy-MM-dd}-%i.log.gz"
        PatternLayout:
          pattern: ${log.pattern}
        Policies:
          # 按天分类
          TimeBasedTriggeringPolicy:
            modulate: true
            interval: 1
        # 文件最多100个
        DefaultRolloverStrategy:
          max: 100
      # 错误日志
      - name: EXCEPTION_ROLLING_FILE
        ignoreExceptions: false
        fileName: ${log.path}/error/${project.name}_error.log
        filePattern: "${log.path}/${log.file.name}/error/$${date:yyyy-MM}/${project.name}-%d{yyyy-MM-dd}-%i.log.gz"
        ThresholdFilter:
          level: error
          onMatch: ACCEPT
          onMismatch: DENY
        PatternLayout:
          pattern: ${log.pattern}
        Policies:
          # 按天分类
          TimeBasedTriggeringPolicy:
            modulate: true
            interval: 1
        # 文件最多100个
        DefaultRolloverStrategy:
          max: 100
      # DB 日志
      - name: DB_ROLLING_FILE
        ignoreExceptions: false
        fileName: ${log.path}/db/${project.name}_db.log
        filePattern: "${log.path}/db/$${date:yyyy-MM}/${project.name}-%d{yyyy-MM-dd}-%i.log.gz"
        ThresholdFilter:
          level: info
          onMatch: ACCEPT
          onMismatch: DENY
        PatternLayout:
          pattern: ${log.pattern}
        Policies:
          # 按天分类
          TimeBasedTriggeringPolicy:
            modulate: true
            interval: 1
        # 文件最多100个
        DefaultRolloverStrategy:
          max: 100
  # 日志配置
  Loggers:
    # 用来指定项目的根日志，如果没有单独指定 Logger，那么就会默认使用该 Root 日志输出
    Root:
      # 日志输出级别
      level: info
      # 用来指定该日志输出到哪个 Appender
      AppenderRef:
        # 通过 ref 指定.
        - ref: CONSOLE
        - ref: ROLLING_FILE
        - ref: EXCEPTION_ROLLING_FILE
    # 用来单独指定日志的形式，比如要为指定包下的 class 指定不同的日志级别等。
    Logger:
      # 业务日志
      - name: business # 用来指定该 Logger 所适用的类或者类所在的包全路径,继承自 Root 节点.
        # 日志输出级别
        level: info
        additivity: false
        # 用来指定该日志输出到哪个 Appender
        # 如果没有指定，就会默认继承自 Root
        # 如果指定了，那么会在指定的这个 Appender 和 Root 的 Appender 中都会输出
        # 此时我们可以设置 Logger 的 additivity="false" 只在自定义的 Appender 中进行输出
        AppenderRef:
          - ref: CONSOLE
          - ref: ROLLING_FILE
          - ref: BUSINESS_ROLLING_FILE
      # 数据库日志
      - name: p6spy
        level: info
        additivity: false
        AppenderRef:
          - ref: CONSOLE
          - ref: ROLLING_FILE
          - ref: DB_ROLLING_FILE